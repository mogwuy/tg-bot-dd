import logging
import json
import sqlite3
from collections import defaultdict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ –∏ —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (INFO –∏ –≤—ã—à–µ)
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite:
# –°–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "bot_db.sqlite". –ü–∞—Ä–∞–º–µ—Ç—Ä check_same_thread=False –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö.
conn = sqlite3.connect("bot_db.sqlite", check_same_thread=False)
# –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∂—É—Ä–Ω–∞–ª–∞ (WAL) –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
conn.execute("PRAGMA journal_mode = WAL")
cursor = conn.cursor()

# –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü "hidden" –≤ —Ç–∞–±–ª–∏—Ü—É breakdowns, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
# –ï—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
try:
    cursor.execute("ALTER TABLE breakdowns ADD COLUMN hidden INTEGER DEFAULT 0")
    conn.commit()
except Exception:
    pass

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã:
# –¢–∞–±–ª–∏—Ü–∞ "users" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –±–æ—Ç–∞.
# –¢–∞–±–ª–∏—Ü–∞ "admins" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö.
# –¢–∞–±–ª–∏—Ü–∞ "orders" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# –¢–∞–±–ª–∏—Ü–∞ "breakdowns" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–±–∏–≤–æ–∫ (–Ω–∞–±–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤).
# –¢–∞–±–ª–∏—Ü–∞ "items" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö, –≤—Ö–æ–¥—è—â–∏—Ö –≤ —Ä–∞–∑–±–∏–≤–∫–∏.
# –¢–∞–±–ª–∏—Ü–∞ "messages" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# –¢–∞–±–ª–∏—Ü–∞ "breakdown_instances" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ä–∞–∑–±–∏–≤–æ–∫ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤.
cursor.executescript("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    phone_number TEXT
);

CREATE TABLE IF NOT EXISTS admins (
    user_id INTEGER PRIMARY KEY,
    username TEXT
);

CREATE TABLE IF NOT EXISTS orders (
    order_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    breakdown_name TEXT NOT NULL,
    items TEXT,
    total_amount REAL,
    instance_id INTEGER,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS breakdowns (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    hidden INTEGER DEFAULT 0
);

CREATE TABLE IF NOT EXISTS items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    breakdown_name TEXT NOT NULL,
    item_name TEXT NOT NULL,
    price REAL NOT NULL,
    FOREIGN KEY(breakdown_name) REFERENCES breakdowns(name)
);

CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    message TEXT NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS breakdown_instances (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    breakdown_name TEXT NOT NULL,
    status TEXT DEFAULT 'open'
);
""")
conn.commit()

def save_user(user) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç.
    –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ username –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ "–ë–µ–∑ –∏–º–µ–Ω–∏".
    """
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
        (user.id, user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏")
    )
    conn.commit()

def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    –ï—Å–ª–∏ user_id —Ä–∞–≤–µ–Ω –∑–∞–¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É (–∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    –ò–Ω–∞—á–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É admins.
    –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    if user_id == 1244636103:
        return True
    cursor.execute("SELECT 1 FROM admins WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

# –§—É–Ω–∫—Ü–∏—è start - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user(update.message.from_user)
    user_id = update.message.from_user.id
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø—Ü–∏–π
    keyboard = [
        [InlineKeyboardButton("üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –†–∞–∑–±–∏–≤–∫–∏", callback_data="actual_breakdowns")],
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å —Å –¢–∞–æ–ë–∞–æ", callback_data="buy_from_taobao")],
        [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç", callback_data="personal_account")]
    ]
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_panel")])
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

# –§—É–Ω–∫—Ü–∏—è button - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏.
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ CallbackQuery
    save_user(query.from_user)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await query.answer()
    data = query.data
    logger.info("Callback data: %s", data)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫–∞–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–±–∏–≤–æ–∫
    if data == "actual_breakdowns":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ä–∞–∑–±–∏–≤–∫–∏, –≥–¥–µ hidden = 0 (–Ω–µ —Å–∫—Ä—ã—Ç—ã)
        cursor.execute("SELECT name FROM breakdowns WHERE hidden = 0")
        breakdowns = cursor.fetchall()
        if breakdowns:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
            keyboard = [[InlineKeyboardButton(b[0], callback_data=f"breakdown_{b[0]}")] for b in breakdowns]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–≤–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            await query.edit_message_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–±–∏–≤–æ–∫.", reply_markup=InlineKeyboardMarkup(keyboard))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
    elif data.startswith("breakdown_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
        breakdown_name = data.split("_", 1)[1]
        context.user_data["current_breakdown"] = breakdown_name
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
        cursor.execute("SELECT item_name, price FROM items WHERE breakdown_name=?", (breakdown_name,))
        items = cursor.fetchall()
        if items:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            context.user_data["selected_items"] = set()
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º —Å—Ç–∞–≤–∏—Ç—Å—è –≥–∞–ª–æ—á–∫–∞.
            keyboard = [
                [InlineKeyboardButton(
                    f"{'‚úÖ ' if i[0] in context.user_data.get('selected_items', set()) else ''}{i[0]} - {i[1]} —Ä—É–±.",
                    callback_data=f"toggle_item_{i[0]}"
                )] for i in items
            ]
            keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_selection")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="actual_breakdowns")])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="actual_breakdowns")]]
            await query.edit_message_text("üö´ –í —ç—Ç–æ–π —Ä–∞–∑–±–∏–≤–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=InlineKeyboardMarkup(keyboard))

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö)
    elif data.startswith("toggle_item_"):
        item_name = data.split("_", 2)[2]
        if item_name in context.user_data.get("selected_items", set()):
            context.user_data["selected_items"].remove(item_name)
        else:
            context.user_data["selected_items"].add(item_name)
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á—ë—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≤—ã–±–æ—Ä–µ
        await show_items_menu(query, context)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    elif data == "finish_selection":
        if context.user_data.get("selected_items"):
            selected_items = context.user_data["selected_items"]
            breakdown_name = context.user_data["current_breakdown"]
            user_id = query.from_user.id

            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
            cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
                           (user_id, query.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"))

            items_details = []
            total = 0.0
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ —Å—É–º–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            for item_name in selected_items:
                cursor.execute("SELECT price FROM items WHERE breakdown_name = ? AND item_name = ?",
                               (breakdown_name, item_name))
                result = cursor.fetchone()
                if result:
                    price = result[0]
                    total += price
                    items_details.append({"name": item_name, "price": price})
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –≤ JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            items_json = json.dumps(items_details, ensure_ascii=False)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ä–∞–∑–±–∏–≤–∫–∏
            cursor.execute("SELECT id FROM breakdown_instances WHERE breakdown_name = ? AND status = 'open' LIMIT 1",
                           (breakdown_name,))
            row = cursor.fetchone()
            if row:
                instance_id = row[0]
            else:
                # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
                cursor.execute("INSERT INTO breakdown_instances (breakdown_name, status) VALUES (?, 'open')",
                               (breakdown_name,))
                instance_id = cursor.lastrowid
            conn.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            unavailable = []
            for item_name in selected_items:
                cursor.execute("SELECT COUNT(*) FROM orders WHERE instance_id = ? AND breakdown_name = ? AND items LIKE ?",
                               (instance_id, breakdown_name, f'%"{item_name}"%'))
                if cursor.fetchone()[0] > 0:
                    unavailable.append(item_name)
            if unavailable:
                message_text = f"‚ùå –¢–æ–≤–∞—Ä—ã {', '.join(unavailable)} —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã. –û–±–Ω–æ–≤–∏—Ç–µ –≤—ã–±–æ—Ä."
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="actual_breakdowns")]]
                await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))
                context.user_data.pop("selected_items", None)
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ç–∞–±–ª–∏—Ü–µ orders
            cursor.execute("INSERT INTO orders (user_id, breakdown_name, items, total_amount, instance_id) VALUES (?, ?, ?, ?, ?)",
                           (user_id, breakdown_name, items_json, total, instance_id))
            conn.commit()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Ä–∞–∑–±–∏–≤–∫–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            cursor.execute("SELECT item_name FROM items WHERE breakdown_name = ?", (breakdown_name,))
            all_items = {r[0] for r in cursor.fetchall()}
            cursor.execute("SELECT items FROM orders WHERE instance_id = ?", (instance_id,))
            taken_items = set()
            for order in cursor.fetchall():
                try:
                    for it in json.loads(order[0]):
                        taken_items.add(it['name'])
                except Exception as e:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s", e)
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–∑–±–∏–≤–∫–∏ –∑–∞–Ω—è—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞ 'complete'
            if all_items == taken_items:
                cursor.execute("UPDATE breakdown_instances SET status = 'complete' WHERE id = ?", (instance_id,))
                conn.commit()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —Å–¥–µ–ª–∞–≤—à–∏–º –∑–∞–∫–∞–∑ –≤ —ç—Ç–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
                cursor.execute("SELECT user_id, items, total_amount FROM orders WHERE instance_id = ?", (instance_id,))
                orders_details = cursor.fetchall()
                for user_id, items_json, order_total in orders_details:
                    try:
                        order_items = json.loads(items_json)
                        items_text = "\n".join([f"‚ñ™ {it['name']} - {it['price']} —Ä—É–±." for it in order_items])
                    except Exception as e:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s", e)
                        items_text = "üö´ –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    notification_message = (
                        f"‚úÖ –°–µ—Ç —Ä–∞–∑–±–∏—Ç!\n–†–∞–∑–±–∏–≤–∫–∞: {breakdown_name}\n–≠–∫–∑–µ–º–ø–ª—è—Ä: {instance_id}\n\n"
                        f"–í–∞—à –∑–∞–∫–∞–∑:\n{items_text}\n–°—É–º–º–∞: {order_total} —Ä—É–±."
                    )
                    try:
                        await context.bot.send_message(chat_id=user_id, text=notification_message)
                    except Exception as e:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, e)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            items_list = "\n".join([f"  - {item['name']}: {item['price']} —Ä—É–±." for item in items_details])
            message_text = (
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤ —Ä–∞–∑–±–∏–≤–∫–µ '{breakdown_name}':\n{items_list}\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total} —Ä—É–±.\n–≠–∫–∑–µ–º–ø–ª—è—Ä: {instance_id}"
            )
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))
            # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            context.user_data.pop("selected_items", None)
        else:
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            await query.edit_message_text("üö´ –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=InlineKeyboardMarkup(keyboard))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç"
    elif data == "personal_account":
        user_id = query.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã orders
        cursor.execute("SELECT breakdown_name, items, total_amount, instance_id FROM orders WHERE user_id = ?", (user_id,))
        orders = cursor.fetchall()
        if not orders:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=InlineKeyboardMarkup(keyboard))
            return
        total_all = 0.0
        message_lines = ["üìÅ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"]
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for breakdown_name, items_json, total, instance_id in orders:
            line = f"üîπ –†–∞–∑–±–∏–≤–∫–∞: {breakdown_name}"
            if instance_id:
                cursor.execute("SELECT status FROM breakdown_instances WHERE id = ?", (instance_id,))
                status = cursor.fetchone()
                if status and status[0] == "complete":
                    line += " (‚úÖ–°–µ—Ç —Ä–∞–∑–±–∏—Ç)"
            message_lines.append(line)
            try:
                items = json.loads(items_json)
                for item in items:
                    message_lines.append(f"    ‚ñ™ {item['name']} - {item['price']} —Ä—É–±.")
            except:
                message_lines.append("    (üö´ –æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤)")
            message_lines.append(f"    –ò—Ç–æ–≥–æ: {total} —Ä—É–±.\n")
            total_all += total
        message_lines.append(f"üí≥ –û–±—â–∞—è —Å—É–º–º–∞: {total_all} —Ä—É–±.")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        await query.edit_message_text("\n".join(message_lines), reply_markup=InlineKeyboardMarkup(keyboard))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
    elif data == "admin_panel":
        keyboard = [
            [InlineKeyboardButton("üìÇ –†–∞–∑–±–∏–≤–∫–∏", callback_data="breakdowns_menu")],
            [InlineKeyboardButton("üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data="view_messages")],
            [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç", callback_data="instance_users_menu")],
            [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="admin_management")],
            [InlineKeyboardButton("üë• –ü–æ–∫–∞–∑–∞—Ç—å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="show_users")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        await query.edit_message_text("‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

    # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–±–∏–≤–∫–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Å–∫—Ä—ã—Ç–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
    elif data == "breakdowns_menu":
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –†–∞–∑–±–∏–≤–∫—É", callback_data="add_breakdown")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ü–æ–∑–∏—Ü–∏—é", callback_data="add_item")],
            [InlineKeyboardButton("üôà –°–∫—Ä—ã—Ç—å –†–∞–∑–±–∏–≤–∫—É", callback_data="hide_breakdown_menu")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –†–∞–∑–±–∏–≤–∫—É", callback_data="delete_breakdown_menu")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        await query.edit_message_text("üìÇ –†–∞–∑–±–∏–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞–∑–±–∏–≤–∫–∏:
    elif data == "add_breakdown":
        await query.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∫–∏:")
        # –§–ª–∞–≥, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π, —á—Ç–æ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
        context.user_data["awaiting_breakdown_name"] = True

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:
    elif data == "add_item":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ (–Ω–µ —Å–∫—Ä—ã—Ç—ã–µ) —Ä–∞–∑–±–∏–≤–∫–∏
        cursor.execute("SELECT name FROM breakdowns WHERE hidden = 0")
        breakdowns = cursor.fetchall()
        if breakdowns:
            keyboard = [[InlineKeyboardButton(b[0], callback_data=f"select_breakdown_{b[0]}")] for b in breakdowns]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")])
            await query.edit_message_text("‚ûï –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–≤–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")]]
            await query.edit_message_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–±–∏–≤–æ–∫.", reply_markup=InlineKeyboardMarkup(keyboard))

    # –í—ã–±–æ—Ä —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:
    elif data.startswith("select_breakdown_"):
        breakdown_name = data.split("_", 2)[2]
        context.user_data["breakdown_name"] = breakdown_name
        await query.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        # –§–ª–∞–≥, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π, —á—Ç–æ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        context.user_data["awaiting_item_name"] = True

    # –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–±–∏–≤–æ–∫:
    elif data == "delete_breakdown_menu":
        cursor.execute("SELECT name, hidden FROM breakdowns")
        breakdowns = cursor.fetchall()
        if breakdowns:
            keyboard = []
            for name, hidden in breakdowns:
                # –û—Ç–º–µ—á–∞–µ–º, –µ—Å–ª–∏ —Ä–∞–∑–±–∏–≤–∫–∞ —É–∂–µ —Å–∫—Ä—ã—Ç–∞
                button_text = f"‚ùå –£–¥–∞–ª–∏—Ç—å {'(—Å–∫—Ä—ã—Ç–∞—è) ' if hidden else ''}{name}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"delete_breakdown_{name}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")])
            await query.edit_message_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–≤–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")]]
            await query.edit_message_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–±–∏–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=InlineKeyboardMarkup(keyboard))

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ–π –¥–∞–Ω–Ω—ã—Ö:
    elif data.startswith("delete_breakdown_"):
        breakdown_name = data.split("delete_breakdown_", 1)[1]
        cursor.execute("DELETE FROM breakdowns WHERE name = ?", (breakdown_name,))
        cursor.execute("DELETE FROM items WHERE breakdown_name = ?", (breakdown_name,))
        cursor.execute("DELETE FROM orders WHERE breakdown_name = ?", (breakdown_name,))
        cursor.execute("DELETE FROM breakdown_instances WHERE breakdown_name = ?", (breakdown_name,))
        conn.commit()
        await query.edit_message_text(f"‚úÖ –†–∞–∑–±–∏–≤–∫–∞ '{breakdown_name}' –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")]]))

    # –ú–µ–Ω—é —Å–∫—Ä—ã—Ç–∏—è —Ä–∞–∑–±–∏–≤–æ–∫:
    elif data == "hide_breakdown_menu":
        cursor.execute("SELECT name FROM breakdowns WHERE hidden = 0")
        breakdowns = cursor.fetchall()
        if breakdowns:
            keyboard = [[InlineKeyboardButton(f"üôà –°–∫—Ä—ã—Ç—å {b[0]}", callback_data=f"hide_breakdown_{b[0]}")] for b in breakdowns]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")])
            await query.edit_message_text("üôà –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–≤–∫—É –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")]]
            await query.edit_message_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–±–∏–≤–æ–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è.", reply_markup=InlineKeyboardMarkup(keyboard))

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏:
    elif data.startswith("hide_breakdown_"):
        breakdown_name = data[len("hide_breakdown_"):]
        cursor.execute("UPDATE breakdowns SET hidden = 1 WHERE name = ?", (breakdown_name,))
        conn.commit()
        await query.edit_message_text(f"‚úÖ –†–∞–∑–±–∏–≤–∫–∞ '{breakdown_name}' —Å–∫—Ä—ã—Ç–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")]]))

    # –ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º —Ä–∞–∑–±–∏–≤–æ–∫:
    elif data == "instance_users_menu":
        keyboard = [
            [InlineKeyboardButton("üìà –†–∞–∑–±–∏—Ç—ã–µ —Ä–∞–∑–±–∏–≤–∫–∏", callback_data="view_full_splits")],
            [InlineKeyboardButton("üìã –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_all_positions")],
            [InlineKeyboardButton("üßæ –ß–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_user_checks")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_position_menu")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        await query.edit_message_text("üìä –û—Ç—á–µ—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))

    # –û—Ç—á–µ—Ç –ø–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–∏—Ç—ã–º –Ω–∞–±–æ—Ä–∞–º:
    elif data == "view_full_splits":
        cursor.execute("""
            SELECT bi.id, bi.breakdown_name, bi.status, o.items, u.username
            FROM breakdown_instances bi
            JOIN orders o ON bi.id = o.instance_id
            JOIN users u ON o.user_id = u.user_id
            WHERE bi.status = 'complete'
        """)
        rows = cursor.fetchall()
        if rows:
            grouped = defaultdict(list)
            instance_info = {}
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —ç–∫–∑–µ–º–ø–ª—è—Ä—É —Ä–∞–∑–±–∏–≤–∫–∏
            for instance_id, breakdown_name, status, items_json, username in rows:
                grouped[instance_id].append((username, items_json))
                instance_info[instance_id] = (breakdown_name, status)
            text_lines = []
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            for instance_id in sorted(grouped.keys()):
                breakdown_name, status = instance_info[instance_id]
                text_lines.append(f"–≠–∫–∑–µ–º–ø–ª—è—Ä: {instance_id}\n–†–∞–∑–±–∏–≤–∫–∞: {breakdown_name} (–°—Ç–∞—Ç—É—Å: {status})")
                for username, items_json in grouped[instance_id]:
                    try:
                        order_items = json.loads(items_json)
                        items_text = ", ".join([f"{it['name']} - {it['price']} —Ä—É–±." for it in order_items])
                    except Exception as e:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s", e)
                        items_text = "üö´ –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    text_lines.append(f"–ó–∞–∫–∞–∑ –æ—Ç @{username}: {items_text}")
                text_lines.append("-" * 40)
            text = "\n".join(text_lines)
        else:
            text = "üö´ –ù–µ—Ç —Ä–∞–∑–±–∏–≤–æ–∫, –≥–¥–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–Ω—è—Ç—ã."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instance_users_menu")]]
        await query.edit_message_text(text=f"<pre>{text}</pre>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

    # –û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:
    elif data == "view_all_positions":
        cursor.execute("SELECT id, breakdown_name FROM breakdown_instances")
        instances = cursor.fetchall()
        all_rows = []
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Ä–∞–∑–±–∏–≤–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–∑–∏—Ü–∏–π (–∑–∞–Ω—è—Ç–æ/—Å–≤–æ–±–æ–¥–Ω–æ)
        for instance_id, breakdown_name in instances:
            cursor.execute("SELECT item_name, price FROM items WHERE breakdown_name = ?", (breakdown_name,))
            items_list = cursor.fetchall()
            cursor.execute("SELECT o.user_id, o.items FROM orders o WHERE o.instance_id = ?", (instance_id,))
            orders = cursor.fetchall()
            taken = {}
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –≤–∑—è—Ç—ã, –∏ –∫–µ–º
            for user_id, items_json in orders:
                try:
                    order_items = json.loads(items_json)
                    cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
                    res = cursor.fetchone()
                    taken_username = "@" + (res[0] if res else str(user_id))
                    for it in order_items:
                        taken[it['name']] = taken_username
                except Exception as e:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s", e)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º
            for item_name, price in items_list:
                status = taken.get(item_name, "–°–≤–æ–±–æ–¥–Ω–æ")
                all_rows.append((instance_id, breakdown_name, item_name, price, status))
        if all_rows:
            grouped = defaultdict(list)
            for instance_id, breakdown_name, item_name, price, status in all_rows:
                grouped[instance_id].append((breakdown_name, item_name, price, status))
            lines = ["–≠–∫–∑–µ–º–ø–ª—è—Ä | –†–∞–∑–±–∏–≤–∫–∞ | –ü–æ–∑–∏—Ü–∏—è | –¶–µ–Ω–∞ | –°—Ç–∞—Ç—É—Å"]
            for instance_id in sorted(grouped.keys()):
                breakdown_name = grouped[instance_id][0][0]
                for row in grouped[instance_id]:
                    _, item_name, price, status = row
                    lines.append(f"{instance_id} | {breakdown_name} | {item_name} | {price} | {status}")
                lines.append("_" * 40)
            text = "\n".join(lines)
        else:
            text = "üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instance_users_menu")]]
        await query.edit_message_text(text=f"<pre>{text}</pre>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

    # –û—Ç—á–µ—Ç –ø–æ —á–µ–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    elif data == "view_user_checks":
        cursor.execute("""
            SELECT o.breakdown_name, o.items, o.total_amount, u.username
            FROM orders o
            JOIN users u ON o.user_id = u.user_id
            WHERE o.instance_id IN (SELECT id FROM breakdown_instances WHERE status = 'complete')
        """)
        orders_data = cursor.fetchall()
        if orders_data:
            grouped = defaultdict(list)
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for breakdown_name, items_json, order_total, username in orders_data:
                grouped[username].append((breakdown_name, items_json, order_total))
            lines = []
            for username, orders_list in grouped.items():
                lines.append(f"==== –ó–∞–∫–∞–∑—ã –æ—Ç @{username} ====")
                for breakdown_name, items_json, order_total in orders_list:
                    try:
                        order_items = json.loads(items_json)
                        items_text = "\n".join([f"‚ñ™ {it['name']} - {it['price']} —Ä—É–±." for it in order_items])
                    except Exception as e:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s", e)
                        items_text = "üö´ –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                    lines.append(f"–†–∞–∑–±–∏–≤–∫–∞: {breakdown_name}\n{items_text}\n–°—É–º–º–∞: {order_total} —Ä—É–±.\n")
                lines.append("-" * 40)
            text = "\n".join(lines)
        else:
            text = "üö´ –ù–µ—Ç —á–µ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instance_users_menu")]]
        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

    # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:
    elif data == "admin_management":
        keyboard = [
            [InlineKeyboardButton("üë§‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")],
            [InlineKeyboardButton("üë§‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="delete_admin_menu")],
            [InlineKeyboardButton("üë§üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="show_admins")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ]
        await query.edit_message_text("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
    elif data == "add_admin":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
        await query.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", 
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_management")]]))
        context.user_data["awaiting_admin"] = True

    # –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
    elif data == "delete_admin_menu":
        cursor.execute("SELECT user_id, username FROM admins")
        admins = cursor.fetchall()
        if admins:
            keyboard = [[InlineKeyboardButton(f"üë§‚ùå –£–¥–∞–ª–∏—Ç—å {username} (ID:{user_id})", callback_data=f"delete_admin_{user_id}")]
                        for user_id, username in admins]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_management")])
            await query.edit_message_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_management")]]
            await query.edit_message_text("üö´ –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=InlineKeyboardMarkup(keyboard))

    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
    elif data.startswith("delete_admin_"):
        admin_id = int(data.split("delete_admin_")[1])
        cursor.execute("DELETE FROM admins WHERE user_id = ?", (admin_id,))
        conn.commit()
        await query.edit_message_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} —É–¥–∞–ª—ë–Ω.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_management")]]))

    # –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
    elif data == "show_admins":
        cursor.execute("SELECT user_id, username FROM admins")
        admins = cursor.fetchall()
        if admins:
            text_lines = [f"@{username} (ID:{user_id})" for user_id, username in admins]
            text = "\n".join(text_lines)
        else:
            text = "üö´ –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_management")]]
        await query.edit_message_text(f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n{text}", reply_markup=InlineKeyboardMarkup(keyboard))

    # –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    elif data == "show_users":
        cursor.execute("SELECT user_id, username FROM users")
        users = cursor.fetchall()
        if users:
            lines = [f"ID: {uid} - @{username}" for uid, username in users]
            text = "\n".join(lines)
        else:
            text = "üö´ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        await query.edit_message_text(text=f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n{text}", reply_markup=InlineKeyboardMarkup(keyboard))

    # –ú–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    elif data == "delete_position_menu":
        cursor.execute("SELECT order_id, user_id, breakdown_name, items FROM orders")
        orders = cursor.fetchall()
        if orders:
            keyboard = []
            for order in orders:
                order_id, user_id, breakdown_name, items_json = order
                try:
                    items_list = json.loads(items_json)
                except Exception as e:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s", e)
                    continue
                if not items_list:
                    continue
                cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,))
                res = cursor.fetchone()
                username = res[0] if res else str(user_id)
                button_text = f"–ó–∞–∫–∞–∑ #{order_id}: {breakdown_name} - @{username}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"select_order_{order_id}")])
            if not keyboard:
                keyboard = [[InlineKeyboardButton("üö´ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π", callback_data="admin_panel")]]
            else:
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instance_users_menu")])
            await query.edit_message_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="instance_users_menu")]]
            await query.edit_message_text("üö´ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π.", reply_markup=InlineKeyboardMarkup(keyboard))

    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:
    elif data.startswith("select_order_"):
        order_id_str = data.split("select_order_", 1)[1]
        try:
            order_id = int(order_id_str)
        except:
            await query.edit_message_text("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.",
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_position_menu")]]))
            return
        cursor.execute("SELECT items FROM orders WHERE order_id = ?", (order_id,))
        result = cursor.fetchone()
        if result is None:
            await query.edit_message_text("üö´ –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_position_menu")]]))
            return
        try:
            items_list = json.loads(result[0])
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s", e)
            items_list = []
        if not items_list:
            await query.edit_message_text("üö´ –í —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_position_menu")]]))
            return
        keyboard = []
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ
        for item in items_list:
            item_name = item.get("name")
            price = item.get("price")
            button_text = f"‚ùå –£–¥–∞–ª–∏—Ç—å {item_name} ({price} —Ä—É–±.)"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"delete_item_{order_id}_{item_name}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_position_menu")])
        await query.edit_message_text(f"–ó–∞–∫–∞–∑ #{order_id}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ:
    elif data.startswith("delete_item_"):
        parts = data.split("_", 3)
        if len(parts) < 4:
            await query.edit_message_text("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_position_menu")]]))
            return
        try:
            order_id = int(parts[2])
        except:
            await query.edit_message_text("üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.",
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_position_menu")]]))
            return
        item_name = parts[3]
        cursor.execute("SELECT items, total_amount, breakdown_name, instance_id FROM orders WHERE order_id = ?", (order_id,))
        order_data = cursor.fetchone()
        if not order_data:
            await query.edit_message_text("üö´ –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_position_menu")]]))
            return
        items_json, total_amount, breakdown_name, instance_id = order_data
        try:
            items_list = json.loads(items_json)
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %s", e)
            items_list = []
        new_items = []
        removed = False
        removed_price = 0
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—é
        for item in items_list:
            if not removed and item.get("name") == item_name:
                removed = True
                removed_price = item.get("price", 0)
            else:
                new_items.append(item)
        if not removed:
            await query.edit_message_text("üö´ –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–∫–∞–∑–µ.",
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_position_menu")]]))
            return
        new_total = total_amount - removed_price
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑ –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ —Ü–µ–ª–∏–∫–æ–º
        if not new_items:
            cursor.execute("DELETE FROM orders WHERE order_id = ?", (order_id,))
            message_text = f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{item_name}' —É–¥–∞–ª–µ–Ω–∞, –∑–∞–∫–∞–∑ #{order_id} —É–¥–∞–ª—ë–Ω."
        else:
            new_items_json = json.dumps(new_items, ensure_ascii=False)
            cursor.execute("UPDATE orders SET items = ?, total_amount = ? WHERE order_id = ?", (new_items_json, new_total, order_id))
            message_text = f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{item_name}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∑–∞–∫–∞–∑–∞ #{order_id}. –ù–æ–≤—ã–π –∏—Ç–æ–≥: {new_total} —Ä—É–±."
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—É —Ä–∞–∑–±–∏–≤–∫–∏, –∏–∑–º–µ–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ "open"
        if instance_id is not None:
            cursor.execute("UPDATE breakdown_instances SET status = 'open' WHERE id = ?", (instance_id,))
        conn.commit()
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_position_menu")]]
        await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(keyboard))

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    elif data == "view_messages":
        cursor.execute("""
            SELECT messages.id, COALESCE(users.username, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') as username, messages.message, messages.timestamp 
            FROM messages 
            LEFT JOIN users ON messages.user_id = users.user_id 
            ORDER BY messages.timestamp DESC 
            LIMIT 10
        """)
        msgs = cursor.fetchall()
        if msgs:
            text_lines = []
            keyboard = []
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg_id, username, message_text, timestamp in msgs:
                text_lines.append(f"ID:{msg_id} | @{username}\n{message_text}\nüïí {timestamp}")
                keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å ID:{msg_id}", callback_data=f"delete_message_{msg_id}")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
            full_text = "\n\n".join(text_lines)
            await query.edit_message_text(f"üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{full_text}", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
            await query.edit_message_text("üö´ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=InlineKeyboardMarkup(keyboard))

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
    elif data.startswith("delete_message_"):
        msg_id = data.split("delete_message_")[1]
        cursor.execute("DELETE FROM messages WHERE id = ?", (msg_id,))
        conn.commit()
        await query.edit_message_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {msg_id} —É–¥–∞–ª–µ–Ω–æ.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_messages")]]))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "–ö—É–ø–∏—Ç—å —Å –¢–∞–æ–ë–∞–æ":
    elif data == "buy_from_taobao":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        await query.edit_message_text("üõí –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å –¢–∞–æ–ë–∞–æ:", reply_markup=InlineKeyboardMarkup(keyboard))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å—Å—ã–ª–∫—É —Å –¢–∞–æ–ë–∞–æ
        context.user_data["awaiting_taobao_message"] = True

    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é:
    elif data == "back_to_main":
        user_id = query.from_user.id
        keyboard = [
            [InlineKeyboardButton("üìÇ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –†–∞–∑–±–∏–≤–∫–∏", callback_data="actual_breakdowns")],
            [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å —Å –¢–∞–æ–ë–∞–æ", callback_data="buy_from_taobao")],
            [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç", callback_data="personal_account")]
        ]
        if is_admin(user_id):
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_panel")])
        await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
    else:
        await query.edit_message_text("üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞)
async def show_items_menu(query, context):
    breakdown_name = context.user_data.get("current_breakdown")
    cursor.execute("SELECT item_name, price FROM items WHERE breakdown_name=?", (breakdown_name,))
    items = cursor.fetchall()
    if items:
        keyboard = [
            [InlineKeyboardButton(f"{'‚úÖ ' if i[0] in context.user_data.get('selected_items', set()) else ''}{i[0]} - {i[1]} —Ä—É–±.",
                                  callback_data=f"toggle_item_{i[0]}")]
            for i in items
        ]
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_selection")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="actual_breakdowns")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="actual_breakdowns")]]
        await query.edit_message_text("üö´ –í —ç—Ç–æ–π —Ä–∞–∑–±–∏–≤–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=InlineKeyboardMarkup(keyboard))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è —Ä–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤–≤–æ–¥–∞
async def handle_combined_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user(update.message.from_user)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
    if context.user_data.get("awaiting_breakdown_name"):
        breakdown_name = update.message.text
        try:
            cursor.execute("INSERT INTO breakdowns (name) VALUES (?)", (breakdown_name,))
            conn.commit()
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")]]
            await update.message.reply_text(f"‚úÖ –†–∞–∑–±–∏–≤–∫–∞ '{breakdown_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=InlineKeyboardMarkup(keyboard))
        except sqlite3.IntegrityError:
            await update.message.reply_text("‚ùå –¢–∞–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        context.user_data.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏
    elif context.user_data.get("awaiting_item_name"):
        context.user_data["item_name"] = update.message.text
        await update.message.reply_text("‚ûï –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
        context.user_data["awaiting_item_price"] = True
        context.user_data["awaiting_item_name"] = False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    elif context.user_data.get("awaiting_item_price"):
        try:
            price = float(update.message.text.replace(",", "."))
            cursor.execute("INSERT INTO items (breakdown_name, item_name, price) VALUES (?, ?, ?)",
                           (context.user_data["breakdown_name"], context.user_data["item_name"], price))
            conn.commit()
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="breakdowns_menu")]]
            await update.message.reply_text("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=InlineKeyboardMarkup(keyboard))
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞")
        context.user_data.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ —Å –¢–∞–æ–ë–∞–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif context.user_data.get("awaiting_taobao_message"):
        user_id = update.message.from_user.id
        username = update.message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ messages
        cursor.execute("INSERT INTO messages (user_id, message) VALUES (?, ?)", (user_id, update.message.text))
        conn.commit()
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
                       (user_id, update.message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"))
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        cursor.execute("SELECT user_id FROM admins")
        admin_ids = cursor.fetchall()
        if not admin_ids:
            admin_ids = [(1244636103,)]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        for admin in admin_ids:
            try:
                await context.bot.send_message(chat_id=admin[0], text=f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}:\n{update.message.text}")
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É %s: %s", admin[0], e)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=keyboard)
        context.user_data.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    elif context.user_data.get("awaiting_admin"):
        try:
            new_admin_id = int(update.message.text.strip())
            chat = await context.bot.get_chat(new_admin_id)
            new_admin_name = chat.first_name or chat.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            cursor.execute("INSERT OR IGNORE INTO admins (user_id, username) VALUES (?, ?)", (new_admin_id, new_admin_name))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {new_admin_name} (ID: {new_admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", e)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ ID")
        context.user_data.clear()

# –§—É–Ω–∫—Ü–∏—è main - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram Bot —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    application = Application.builder().token("–¢–û–ö–ï–ù –ë–û–¢–ê").build()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_combined_input))
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)
    application.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == "__main__":
    main()
